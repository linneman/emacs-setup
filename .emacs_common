;;; OL's common setup (OS independent)

;;; global setup
(global-linum-mode 1)
(global-font-lock-mode t)
(setq inhibit-splash-screen t)

; use short version for yes or no question
(defalias 'yes-or-no-p 'y-or-n-p)

; used for git, be careful not to introduce too much change!
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;;; alter load path for additional libraries
(add-to-list 'load-path "~/.emacs.d/lisp")


;;; evil (VIM emulation)
(add-to-list 'load-path "~/.emacs.d/lisp/evil")
(require 'evil)
(evil-mode 1)


;;; Rainbow Delimiters
(require 'rainbow-delimiters)
(add-hook 'clojure-mode-hook 'rainbow-delimiters-mode-enable)
(add-hook 'clojurescript-mode-hook 'rainbow-delimiters-mode-enable)

(custom-set-faces
 '(rainbow-delimiters-depth-1-face ((((background dark)) (:foreground "#00FF00"))))
 '(rainbow-delimiters-depth-2-face ((((background dark)) (:foreground "#00CCFF"))))
 '(rainbow-delimiters-depth-3-face ((((background dark)) (:foreground "#FFFF00"))))
 '(rainbow-delimiters-depth-4-face ((((background dark)) (:foreground "#FF8800"))))
 '(rainbow-delimiters-depth-6-face ((((background dark)) (:foreground "#22CC22"))))
 '(rainbow-delimiters-depth-7-face ((((background dark)) (:foreground "#CC00FF"))))
 '(rainbow-delimiters-depth-8-face ((((background dark)) (:foreground "#FF00AA")))))


;;; SLIME
(add-to-list 'load-path "~/.emacs.d/lisp/slime")
(require 'slime)

;;; Clojure
(require 'clojure-mode)

(require 'paredit)
(defun turn-on-paredit () (paredit-mode 1))
(add-hook 'clojure-mode-hook 'turn-on-paredit)
(add-hook 'slime-mode-hook 'turn-on-paredit)
(add-hook 'slime-repl-mode-hook 'turn-on-paredit)
(add-hook 'slime-repl-mode-hook 'clojure-mode-font-lock-setup)
(setq slime-net-coding-system 'utf-8-unix)
(setq slime-protocol-version 'ignore)

(eval-after-load "slime"
  '(progn (slime-setup '(slime-repl))))

;;; Clojurescript
;;; set inferior lisp program ( C-c C-z ) to clojurescript repl
;;; refer to https://github.com/clojure/clojurescript/wiki/Emacs-%26-inferior-lisp-mode
;;; for information
(require 'clojurescript-mode)
(add-hook 'clojurescript-mode-hook 'turn-on-paredit)
(add-hook 'inferior-lisp-mode-hook 'turn-on-paredit)
(setq inferior-lisp-program "browser-repl")



;;; Setup for C-Programming
(setq c-default-style "linux"
      c-basic-offset 2)

;; CSCOPE
;(require 'xcscope)
;(setq cscope-do-not-update-database t)
;(setq cscope-display-cscope-buffer nil)

;; GTAGS
(autoload 'gtags-mode "gtags" "" t)

(add-hook 'c-mode-hook
	  '(lambda ()
	     (gtags-mode 1)
	     (setq default-tab-size 2)
	     (setq default-tab-width 2)
	     (setq indent-tabs-mode nil)
	     (setq c-indent-level 2)
	     ))

(add-hook 'gtags-select-mode-hook
  '(lambda ()
     (setq hl-line-face 'underline)
     (hl-line-mode 1)
))

(add-hook 'gtags-select-mode-hook
  '(lambda ()
     (setq hl-line-face 'underline)
     (hl-line-mode 1)
))

(setq gtags-suggested-key-mapping t)


;;; GIT
(add-to-list 'load-path "~/.emacs.d/lisp/git-emacs")
(require 'git-emacs)
(require 'git-blame)

(require 'git-commit)


;;; CEDT
(load-file "~/.emacs.d/lisp/cedet-1.0/common/cedet.el")
(global-ede-mode 1)                      ; Enable the Project management system
(semantic-load-enable-code-helpers)      ; Enable prototype help and smart completion
(global-srecode-minor-mode 1)            ; Enable template insertion menu

;;; Semantic
;;; currently commented out due to signficant slow down of Emacs
;(require 'semanticdb)
;(global-semanticdb-minor-mode 1)

;(require 'semanticdb-global)
;(semanticdb-enable-gnu-global-databases 'c-mode)
;(semanticdb-enable-gnu-global-databases 'c++-mode)


;;; VIM like helper(s)
(defun vi-open-line-below ()
  "Insert a newline below the current line and put point at beginning."
  (interactive)
  (unless (eolp)
    (end-of-line))
  (newline-and-indent))

(defun goto-match-paren (arg)
  "Go to the matching  if on (){}[], similar to vi style of % "
  "taken from http://www.emacswiki.org/emacs/ParenthesisMatching"
  (interactive "p")
  ;; first, check for "outside of bracket" positions expected by forward-sexp, etc.
  (cond ((looking-at "[\[\(\{]") (forward-sexp))
        ((looking-back "[\]\)\}]" 1) (backward-sexp))
        ;; now, try to succeed from inside of a bracket
        ((looking-at "[\]\)\}]") (forward-char) (backward-sexp))
        ((looking-back "[\[\(\{]" 1) (backward-char) (forward-sexp))
        (t nil)))

(defun show-file-name ()
  "Show the full path file name in the minibuffer."
  (interactive)
  (message (buffer-file-name)))

;;; global keys
(global-set-key (kbd "C-x g") 'goto-line)
(global-set-key (kbd "C-x 5") 'goto-match-paren)
(global-set-key (kbd "C-o") 'vi-open-line-below)
(global-set-key (kbd "C-?") 'show-file-name)
(global-set-key (kbd "C-,") 'point-to-register)
(global-set-key (kbd "C-.") 'jump-to-register)
