;;; OL's common setup (OS independent)

;;; global setup
(global-linum-mode 1)
(global-font-lock-mode t)
(setq inhibit-splash-screen t)
(server-start)
(customize-set-variable 'indent-tabs-mode nil)

;(setq url-proxy-services '(("http" . "172.28.28.254:3128")
;                           ("https" . "172.28.28.254:3128")))

(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
;(add-to-list 'package-archives
;             '("marmalade" . "http://marmalade-repo.org/packages/") t)
(package-initialize)

; use short version for yes or no question
(defalias 'yes-or-no-p 'y-or-n-p)

; used for git, be careful not to introduce too much change!
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;;; alter load path for additional libraries
(add-to-list 'load-path "~/.emacs.d/lisp")


;;; Solarized Colorscheme for Emacs
;(load-theme 'solarized-light t)
;(load-theme 'whiteboard t)
(load-theme 'solarized-dark t)


;;; Solarized Colorscheme for Ansi-Term
;(defun my-term-hook ()
;  (goto-address-mode)
;  (define-key term-raw-map "\C-y" 'my-term-paste)
;  (let ((base03  "#002b36")
;        (base02  "#073642")
;        (base01  "#586e75")
;        (base00  "#657b83")
;        (base0   "#839496")
;        (base1   "#93a1a1")
;        (base2   "#eee8d5")
;        (base3   "#fdf6e3")
;        (yellow  "#b58900")
;        (orange  "#cb4b16")
;        (red     "#dc322f")
;        (magenta "#d33682")
;        (violet  "#6c71c4")
;        (blue    "#268bd2")
;        (cyan    "#2aa198")
;        (green   "#859900"))
;    (setq ansi-term-color-vector
;          (vconcat `(unspecified ,base02 ,red ,green ,yellow ,blue
;                                 ,magenta ,cyan ,base2)))))
;
;(add-hook 'term-mode-hook 'my-term-hook)

;; Terminal buffer configuration.
 (add-hook 'term-mode-hook 'my-term-mode-hook)
 (defun my-term-mode-hook ()
   ;; disable line numbers in terminal
   (linum-mode 0)
   ;; https://www.emacswiki.org/emacs/AnsiTermHints#toc8
   ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=20611
   (setq bidi-paragraph-direction 'left-to-right))


;;; ido mode
(require 'ido)
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(ido-enable-flex-matching t)
 '(ido-mode (quote both) nil (ido))
 '(tool-bar-mode nil))

;;; evil (VIM emulation)
(setq evil-want-C-i-jump nil) ;; for tab in org mode under terminal
(require 'evil)
(evil-mode 1)

;;; define macros @j,@k in evil for justifying paragraph to 70 respecively
;;; 80 columns
;;; requires the unix par command installed on your machine
(evil-set-register ?j
   [?V ?\} ?\M-x ?s ?h ?e ?l ?l ?- ?c ?o ?m ?m ?a ?n ?d ?- ?o ?n ?- ?r ?e ?g ?i ?e backspace tab return ?p ?a ?r ?  ?w ?7 ?0 ?j return ?\C-x ?b ?S ?h ?e ?l ?l ?  ?C ?o ?m ?m ?a ?n ?d ?  ?O ?u ?t ?p ?u ?t return ?g ?g ?V ?G ?y ?\C-x ?b return ?\{ ?V escape ?k ?j ?j ?V ?\} ?p])

(evil-set-register ?k
 [?V ?\} ?\M-x ?s ?h ?e ?l ?l ?- ?c ?o ?m ?m ?a ?n ?d ?- ?o ?n ?- ?r ?e ?g ?i ?e backspace tab return ?p ?a ?r ?  ?w ?8 ?0 ?j return ?\C-x ?b ?S ?h ?e ?l ?l ?  ?C ?o ?m ?m ?a ?n ?d ?  ?O ?u ?t ?p ?u ?t return ?g ?g ?V ?G ?y ?\C-x ?b return ?\{ ?V escape ?k ?j ?j ?V ?\} ?p])


;;; Rainbow Delimiters
(require 'rainbow-delimiters)
(add-hook 'clojure-mode-hook 'rainbow-delimiters-mode-enable)
(add-hook 'clojurescript-mode-hook 'rainbow-delimiters-mode-enable)

(custom-set-faces
 '(rainbow-delimiters-depth-1-face ((((background dark)) (:foreground "#b58900")))) ; yellow
 '(rainbow-delimiters-depth-2-face ((((background dark)) (:foreground "#859900")))) ; green
 '(rainbow-delimiters-depth-3-face ((((background dark)) (:foreground "#cb4b16")))) ; orange
 '(rainbow-delimiters-depth-4-face ((((background dark)) (:foreground "#268bd2")))) ; blue
 '(rainbow-delimiters-depth-5-face ((((background dark)) (:foreground "#dc322f")))) ; red
 '(rainbow-delimiters-depth-6-face ((((background dark)) (:foreground "#2aa198")))) ; cyan
 '(rainbow-delimiters-depth-7-face ((((background dark)) (:foreground "#d33682")))) ; magenta
 '(rainbow-delimiters-depth-8-face ((((background dark)) (:foreground "#268bd2")))) ; blue
 '(rainbow-delimiters-depth-9-face ((((background dark)) (:foreground "#6c71c4")))) ; violet
)

;;; Gambit Scheme
(require 'gambit)

;;; SLIME
(eval-after-load "slime"
  '(progn (slime-setup '(slime-repl))))

;;; Clojure
(require 'clojure-mode)
(require 'paredit)
(defun turn-on-paredit () (paredit-mode 1))

;;; Dash
(add-to-list 'load-path "~/.emacs.d/lisp/dash")
(require 'dash)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Allow input to be sent to somewhere other than inferior-lisp
;; Taken from clojure-one (https://github.com/brentonashworth/one/wiki/Emacs)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(add-to-list 'auto-mode-alist '("\.cljs$" . clojure-mode))

;; This is a total hack: we're hardcoding the name of the shell buffer
(defun shell-send-input (input)
  "Send INPUT into the *shell* buffer and leave it visible."
  (save-selected-window
    (switch-to-buffer-other-window "*shell*")
    (goto-char (point-max))
    (insert (replace-regexp-in-string "\n" " " input ))
    (comint-send-input)))

(defun defun-at-point ()
  "Return the text of the defun at point."
  (apply #'buffer-substring-no-properties
         (region-for-defun-at-point)))

(defun region-for-defun-at-point ()
  "Return the start and end position of defun at point."
  (save-excursion
    (save-match-data
      (end-of-defun)
      (let ((end (point)))
        (beginning-of-defun)
        (list (point) end)))))

(defun expression-preceding-point ()
  "Return the expression preceding point as a string."
  (buffer-substring-no-properties
   (save-excursion (backward-sexp) (point))
   (point)))

(defun shell-eval-last-expression ()
  "Send the expression preceding point to the *shell* buffer."
  (interactive)
  (shell-send-input (expression-preceding-point)))

(defun shell-eval-defun ()
  "Send the current toplevel expression to the *shell* buffer."
  (interactive)
  (shell-send-input (defun-at-point)))

(add-hook 'clojure-mode-hook
	  '(lambda ()
	     (turn-on-paredit)
             (define-key clojure-mode-map (kbd "C-c e") 'shell-eval-last-expression)
             (define-key clojure-mode-map (kbd "C-c x") 'shell-eval-defun)))

(add-hook 'scheme-mode-hook
          '(lambda ()
             (turn-on-paredit)
             (define-key scheme-mode-map (kbd "C-c e") 'shell-eval-last-expression)
             (define-key scheme-mode-map (kbd "C-c x") 'shell-eval-defun)))

(add-hook 'slime-mode-hook 'turn-on-paredit)
(add-hook 'slime-repl-mode-hook 'turn-on-paredit)
(add-hook 'slime-repl-mode-hook 'clojure-mode-font-lock-setup)
(setq slime-net-coding-system 'utf-8-unix)
(setq slime-protocol-version 'ignore)


;;; Setup for C-Programming
(setq c-default-style "linux"
      c-basic-offset 2)

;; CSCOPE
;(require 'xcscope)
;(setq cscope-do-not-update-database t)
;(setq cscope-display-cscope-buffer nil)

;; GTAGS
(autoload 'gtags-mode "gtags" "" t)


(add-hook 'c-mode-hook
	  '(lambda ()
	     (gtags-mode 1)
	     (setq default-tab-size 2)
	     (setq default-tab-width 2)
	     (setq indent-tabs-mode nil)
	     (setq c-indent-level 2)
	     ))

(add-hook 'gtags-select-mode-hook
  '(lambda ()
     (setq hl-line-face 'underline)
     (hl-line-mode 1)
))

(add-hook 'gtags-select-mode-hook
  '(lambda ()
     (setq hl-line-face 'underline)
     (hl-line-mode 1)
))

(setq gtags-suggested-key-mapping t)


;;; GIT
(require 'magit)
(require 'evil-magit)


;;; Text mode (Latex)
(add-hook 'text-mode-hook
          (lambda ()
            (auto-fill-mode 1)
            (set-fill-column 100)))

;;; Octave
(add-to-list 'load-path "~/.emacs.d/lisp/octave")
(autoload 'octave-mode "octave-mod" nil t)
(autoload 'octave-help "octave-hlp" nil t)
(setq auto-mode-alist (cons '("\\.m$" . octave-mode) auto-mode-alist))
(add-hook 'octave-mode-hook
          (lambda ()
            (abbrev-mode 1)
            (auto-fill-mode 1)
            (if (eq window-system 'x)
                (font-lock-mode 1))))

;;; ediff
(setq ediff-window-setup-function 'ediff-setup-windows-plain)


;;; CEDT
;(load-file "~/.emacs.d/lisp/cedet-1.0/common/cedet.el")
;(global-ede-mode 1)                      ; Enable the Project management system
;(semantic-load-enable-code-helpers)      ; Enable prototype help and smart completion
;(global-srecode-minor-mode 1)            ; Enable template insertion menu

;;; Semantic
;;; currently commented out due to signficant slow down of Emacs
;(require 'semanticdb)
;(global-semanticdb-minor-mode 1)

;(require 'semanticdb-global)
;(semanticdb-enable-gnu-global-databases 'c-mode)
;(semanticdb-enable-gnu-global-databases 'c++-mode)


;;; VIM like helper(s)
(defun vi-open-line-below ()
  "Insert a newline below the current line and put point at beginning."
  (interactive)
  (unless (eolp)
    (end-of-line))
  (newline-and-indent))

(defun goto-match-paren (arg)
  "Go to the matching  if on (){}[], similar to vi style of % "
  "taken from http://www.emacswiki.org/emacs/ParenthesisMatching"
  (interactive "p")
  ;; first, check for "outside of bracket" positions expected by forward-sexp, etc.
  (cond ((looking-at "[\[\(\{]") (forward-sexp))
        ((looking-back "[\]\)\}]" 1) (backward-sexp))
        ;; now, try to succeed from inside of a bracket
        ((looking-at "[\]\)\}]") (forward-char) (backward-sexp))
        ((looking-back "[\[\(\{]" 1) (backward-char) (forward-sexp))
        (t nil)))

(defun ol-put-file-name-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))


;;; shell evaluation and replacement for par
;;; e.g. for par w50jp0s0
(defun shell-command-on-region-replace (start end command)
  "Run shell-command-on-region interactivly replacing the region in place"
  (interactive (let (string)
         (unless (mark)
           (error "The mark is not set now, so there is no region"))
         ;; Do this before calling region-beginning
         ;; and region-end, in case subprocess output
         ;; relocates them while we are in the minibuffer.
         ;; call-interactively recognizes region-beginning and
         ;; region-end specially, leaving them in the history.
         (setq string (read-from-minibuffer "Shell command on region: "
                                            nil nil nil
                                            'shell-command-history))
         (list (region-beginning) (region-end)
               string)))
  (shell-command-on-region start end command t t)
  )


;;; autocomplete
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "/Users/ol/.emacs.d/ac-dict")
(ac-config-default)
(setq ac-sources '(ac-source-semantic ac-source-yasnippet))


;;; gcc sense
(require 'gccsense)

;; org mode
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(require 'evil-org)
(require 'ob-sh)
(setq org-hide-emphasis-markers t)

(org-babel-do-load-languages
 'org-babel-load-languages '((shell . t)
                             (emacs-lisp . t)))


;;; evil initial state setup
(loop for (mode . state) in '((inferior-emacs-lisp-mode      . emacs)
                              (pylookup-mode                 . emacs)
                              (comint-mode                   . emacs)
                              (ebib-entry-mode               . emacs)
                              (ebib-index-mode               . emacs)
                              (ebib-log-mode                 . emacs)
                              (gtags-select-mode             . emacs)
                              (shell-mode                    . insert)
                              (term-mode                     . insert)
                              (bc-menu-mode                  . emacs)
                              (magit-branch-manager-mode     . emacs)
                              (semantic-symref-results-mode  . emacs)
                              (rdictcc-buffer-mode           . emacs))
      do (evil-set-initial-state mode state))

;;; declare jk as <esc> in evil insert mode using the package key-chord
;;; taken from http://blog.jenkster.com/2013/02/mapping-jk-in-emacs-evil-mode.html
(require 'key-chord)
(key-chord-mode 1)
(key-chord-define evil-insert-state-map "jk" 'evil-normal-state)

;;; clojure keymaps
(evil-define-key 'normal clojure-mode-map (kbd "M-.") 'cider-test-jump)
(evil-define-key 'normal clojure-mode-map (kbd "M-,") 'cider-jump-back)

;;; global keys
(define-key evil-insert-state-map "\C-f" 'evil-normal-state)
(define-key evil-visual-state-map "\C-f" 'evil-normal-state)
(define-key evil-normal-state-map "\C-t" 'gtags-pop-stack)

(global-set-key (kbd "C-x g") 'goto-line)
(global-set-key (kbd "C-x 5") 'goto-match-paren)
(global-set-key (kbd "C-o") 'vi-open-line-below)
(global-set-key (kbd "C-x ?") 'ol-put-file-name-on-clipboard)
(global-set-key (kbd "C-,") 'point-to-register)
(global-set-key (kbd "C-.") 'jump-to-register)
