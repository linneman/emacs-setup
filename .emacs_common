;;; OL's common setup (OS independent)

;;; global setup
(global-linum-mode 1)
(global-font-lock-mode t)
(setq inhibit-splash-screen t)
(server-start)

; use short version for yes or no question
(defalias 'yes-or-no-p 'y-or-n-p)

; used for git, be careful not to introduce too much change!
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;;; alter load path for additional libraries
(add-to-list 'load-path "~/.emacs.d/lisp")


;;; Color Scheme
(add-to-list 'load-path "~/.emacs.d/lisp/color-theme-6.6.0")
(require 'color-theme)
;(eval-after-load "color-theme"
;  '(progn
;     (color-theme-initialize)
;     (color-theme-hober)))

;;; Solarized Colorscheme for Emacs
(add-to-list 'load-path "~/.emacs.d/lisp/emacs-color-theme-solarized")
(require 'color-theme-solarized)
(eval-after-load "color-theme-solarized"
  '(progn
     (color-theme-initialize)
     (color-theme-solarized-dark)))


;;; ido mode
(require 'ido)
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(ido-enable-flex-matching t)
 '(ido-mode (quote both) nil (ido))
 '(tool-bar-mode nil))

;;; evil (VIM emulation)
(add-to-list 'load-path "~/.emacs.d/lisp/evil")
(require 'evil)
(evil-mode 1)


;;; Rainbow Delimiters
(require 'rainbow-delimiters)
(add-hook 'clojure-mode-hook 'rainbow-delimiters-mode-enable)
(add-hook 'clojurescript-mode-hook 'rainbow-delimiters-mode-enable)

(custom-set-faces
 '(rainbow-delimiters-depth-1-face ((((background dark)) (:foreground "#b58900")))) ; yellow
 '(rainbow-delimiters-depth-2-face ((((background dark)) (:foreground "#859900")))) ; green
 '(rainbow-delimiters-depth-3-face ((((background dark)) (:foreground "#cb4b16")))) ; orange
 '(rainbow-delimiters-depth-4-face ((((background dark)) (:foreground "#268bd2")))) ; blue
 '(rainbow-delimiters-depth-5-face ((((background dark)) (:foreground "#dc322f")))) ; red
 '(rainbow-delimiters-depth-6-face ((((background dark)) (:foreground "#2aa198")))) ; cyan
 '(rainbow-delimiters-depth-7-face ((((background dark)) (:foreground "#d33682")))) ; magenta
 '(rainbow-delimiters-depth-8-face ((((background dark)) (:foreground "#268bd2")))) ; blue
 '(rainbow-delimiters-depth-9-face ((((background dark)) (:foreground "#6c71c4")))) ; violet
)


;;; SLIME
(add-to-list 'load-path "~/.emacs.d/lisp/slime")
(require 'slime)



;;; Clojure
(require 'clojure-mode)
(require 'paredit)
(defun turn-on-paredit () (paredit-mode 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Allow input to be sent to somewhere other than inferior-lisp
;; Taken from clojure-one (https://github.com/brentonashworth/one/wiki/Emacs)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; This is a total hack: we're hardcoding the name of the shell buffer
(defun shell-send-input (input)
  "Send INPUT into the *shell* buffer and leave it visible."
  (save-selected-window
    (switch-to-buffer-other-window "*shell*")
    (goto-char (point-max))
    (insert input)
    (comint-send-input)))

(defun defun-at-point ()
  "Return the text of the defun at point."
  (apply #'buffer-substring-no-properties
         (region-for-defun-at-point)))

(defun region-for-defun-at-point ()
  "Return the start and end position of defun at point."
  (save-excursion
    (save-match-data
      (end-of-defun)
      (let ((end (point)))
        (beginning-of-defun)
        (list (point) end)))))

(defun expression-preceding-point ()
  "Return the expression preceding point as a string."
  (buffer-substring-no-properties
   (save-excursion (backward-sexp) (point))
   (point)))

(defun shell-eval-last-expression ()
  "Send the expression preceding point to the *shell* buffer."
  (interactive)
  (shell-send-input (expression-preceding-point)))

(defun shell-eval-defun ()
  "Send the current toplevel expression to the *shell* buffer."
  (interactive)
  (shell-send-input (defun-at-point)))

(add-hook 'clojure-mode-hook
	  '(lambda ()
	     (turn-on-paredit)
             (define-key clojure-mode-map (kbd "\C-c\C-e") 'shell-eval-last-expression)
             (define-key clojure-mode-map (kbd "\C-c\C-x") 'shell-eval-defun)))

(add-hook 'slime-mode-hook 'turn-on-paredit)
(add-hook 'slime-repl-mode-hook 'turn-on-paredit)
(add-hook 'slime-repl-mode-hook 'clojure-mode-font-lock-setup)
(setq slime-net-coding-system 'utf-8-unix)
(setq slime-protocol-version 'ignore)

(eval-after-load "slime"
  '(progn (slime-setup '(slime-repl))))


(require 'clojurescript-mode)
(add-hook 'clojurescript-mode-hook
	  '(lambda ()
	     (turn-on-paredit)
             (define-key clojurescript-mode-map (kbd "\C-c\C-e") 'shell-eval-last-expression)
             (define-key clojurescript-mode-map (kbd "\C-c\C-x") 'shell-eval-defun)))

;;; Clojurescript
;;; set (alternative) inferior lisp program ( C-c C-z ) to clojurescript repl
;;; refer to https://github.com/clojure/clojurescript/wiki/Emacs-%26-inferior-lisp-mode
;;; for information
(add-hook 'inferior-lisp-mode-hook 'turn-on-paredit)
(setq inferior-lisp-program "browser-repl")




;;; Gambit Scheme
(require 'gambit)

;;; Setup for C-Programming
(setq c-default-style "linux"
      c-basic-offset 2)

;; CSCOPE
;(require 'xcscope)
;(setq cscope-do-not-update-database t)
;(setq cscope-display-cscope-buffer nil)

;; GTAGS
(autoload 'gtags-mode "gtags" "" t)

(add-hook 'c-mode-hook
	  '(lambda ()
	     (gtags-mode 1)
	     (setq default-tab-size 2)
	     (setq default-tab-width 2)
	     (setq indent-tabs-mode nil)
	     (setq c-indent-level 2)
	     ))

(add-hook 'gtags-select-mode-hook
  '(lambda ()
     (setq hl-line-face 'underline)
     (hl-line-mode 1)
))

(add-hook 'gtags-select-mode-hook
  '(lambda ()
     (setq hl-line-face 'underline)
     (hl-line-mode 1)
))

(setq gtags-suggested-key-mapping t)


;;; GIT
(add-to-list 'load-path "~/.emacs.d/lisp/magit")
(require 'magit)

;(add-to-list 'load-path "~/.emacs.d/lisp/git-emacs")
;(require 'git-emacs)
;(require 'git-blame)
;(require 'git-commit)


;;; Octave
(add-to-list 'load-path "~/.emacs.d/lisp/octave")
(autoload 'octave-mode "octave-mod" nil t)
(autoload 'octave-help "octave-hlp" nil t)
(setq auto-mode-alist (cons '("\\.m$" . octave-mode) auto-mode-alist))
(add-hook 'octave-mode-hook
          (lambda ()
            (abbrev-mode 1)
            (auto-fill-mode 1)
            (if (eq window-system 'x)
                (font-lock-mode 1))))


;;; CEDT
;(load-file "~/.emacs.d/lisp/cedet-1.0/common/cedet.el")
;(global-ede-mode 1)                      ; Enable the Project management system
;(semantic-load-enable-code-helpers)      ; Enable prototype help and smart completion
;(global-srecode-minor-mode 1)            ; Enable template insertion menu

;;; Semantic
;;; currently commented out due to signficant slow down of Emacs
;(require 'semanticdb)
;(global-semanticdb-minor-mode 1)

;(require 'semanticdb-global)
;(semanticdb-enable-gnu-global-databases 'c-mode)
;(semanticdb-enable-gnu-global-databases 'c++-mode)


;;; org-mode
(add-to-list 'load-path "~/.emacs.d/lisp/org-mode")
(require 'org-install)

;;; VIM like helper(s)
(defun vi-open-line-below ()
  "Insert a newline below the current line and put point at beginning."
  (interactive)
  (unless (eolp)
    (end-of-line))
  (newline-and-indent))

(defun goto-match-paren (arg)
  "Go to the matching  if on (){}[], similar to vi style of % "
  "taken from http://www.emacswiki.org/emacs/ParenthesisMatching"
  (interactive "p")
  ;; first, check for "outside of bracket" positions expected by forward-sexp, etc.
  (cond ((looking-at "[\[\(\{]") (forward-sexp))
        ((looking-back "[\]\)\}]" 1) (backward-sexp))
        ;; now, try to succeed from inside of a bracket
        ((looking-at "[\]\)\}]") (forward-char) (backward-sexp))
        ((looking-back "[\[\(\{]" 1) (backward-char) (forward-sexp))
        (t nil)))

(defun show-file-name ()
  "Show the full path file name in the minibuffer."
  (interactive)
  (message (buffer-file-name)))


;;; shell evaluation and replacement for par
;;; e.g. for par w50jp0s0
(defun shell-command-on-region-replace (start end command)
  "Run shell-command-on-region interactivly replacing the region in place"
  (interactive (let (string)
         (unless (mark)
           (error "The mark is not set now, so there is no region"))
         ;; Do this before calling region-beginning
         ;; and region-end, in case subprocess output
         ;; relocates them while we are in the minibuffer.
         ;; call-interactively recognizes region-beginning and
         ;; region-end specially, leaving them in the history.
         (setq string (read-from-minibuffer "Shell command on region: "
                                            nil nil nil
                                            'shell-command-history))
         (list (region-beginning) (region-end)
               string)))
  (shell-command-on-region start end command t t)
  )


;;; evil mode extensions for gtags-select-mode
(define-minor-mode evil-gtags-select-mode
    "gtags-select-mode."
  :keymap (make-sparse-keymap))

(add-hook 'gtags-select-mode-hook 'evil-gtags-select-mode)

;;; clojure keymaps
(evil-define-key 'normal clojure-mode-map (kbd "M-.") 'slime-edit-definition)
(evil-define-key 'normal clojure-mode-map (kbd "M-,") 'slime-pop-find-definition-stack)

;;; global keys
(define-key evil-insert-state-map "\C-f" 'evil-normal-state)
(define-key evil-visual-state-map "\C-f" 'evil-normal-state)
(define-key evil-normal-state-map "\C-t" 'gtags-pop-stack)
(evil-define-key 'normal evil-gtags-select-mode-map (kbd "RET") 'gtags-select-tag)

(global-set-key (kbd "C-x g") 'goto-line)
(global-set-key (kbd "C-x 5") 'goto-match-paren)
(global-set-key (kbd "C-o") 'vi-open-line-below)
(global-set-key (kbd "C-?") 'show-file-name)
(global-set-key (kbd "C-,") 'point-to-register)
(global-set-key (kbd "C-.") 'jump-to-register)
